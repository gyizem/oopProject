#include <stdlib.h>
#include <stdio.h>

struct tNode{
	int data;
	struct tNode *lChild;
	struct tNode *rChild;
};
typedef struct tNode tnode;

void insert(tnode **root,int data){
	
	if(*root==NULL){
		*root=(tnode*)malloc(sizeof(tnode));
		(*root)->data=data;
		(*root)->lChild=NULL;
		(*root)->rChild=NULL;
	}
	else{
		if((*root)->data>data)
		{
			if((*root)->lChild==NULL){
				(*root)->lChild=(tnode*)malloc(sizeof(tnode));
				(*root)->lChild->data=data;
				(*root)->lChild->lChild=NULL;
				(*root)->lChild->rChild=NULL;	
			}
			else{
				insert(&((*root)->lChild),data);
			}
			
		}
		else if((*root)->data<data){
			if((*root)->rChild==NULL){
				(*root)->rChild=(tnode*)malloc(sizeof(tnode));
				(*root)->rChild->data=data;
				(*root)->rChild->rChild=NULL;
				(*root)->rChild->lChild=NULL;
			}
			else{
				insert(&((*root)->rChild),data);
			}
		}
		else{
			printf("There is same number in the tree.\n");
		}
	}
	
}

void printInOrder(tnode *root){
	if(root!=NULL){
		printInOrder(root->lChild);
		printf(" %d ",root->data);
		printInOrder(root->rChild);
	}
	
}
void postOrder(tnode *root){
	if(root!=NULL){
		postOrder(root->lChild);
		postOrder(root->rChild);
		printf(" %d ",root->data);
	}
}
void preOrder(tnode *root){
	if(root!=NULL){
		printf(" %d ",root->data);
		preOrder(root->lChild);
		preOrder(root->rChild);
	}
}
int count(tnode *root){
	if(root==NULL){
		return 0;
	}else{
		return (1+count(root->lChild)+count(root->rChild));
	}
}

int main() {
	/* 
	tnode *root = NULL;
	
	insert(&root,40);
	insert(&root,50);
	insert(&root,60);
	insert(&root,10);
	insert(&root,1);
	insert(&root,311);
	printInOrder(root);
	printf("\n");
	preOrder(root);
	printf("\n");
	postOrder(root);
	printf("\n");
	printf("count : %d \n",count(root)); */
	tnode *evenRoot = NULL;
	tnode *oddRoot = NULL;
	int num=100;
	while(num!=-1){
		scanf("%d",&num);
		if(num!=-1){
			if(num%2==0){
				insert(&evenRoot,num);
			}
			else{
				insert(&oddRoot,num);
			}	
		}	
	}
	printInOrder(evenRoot);
	printf("\n");
	printInOrder(oddRoot);
	printf("\n");
	
	
	return 0; 
}